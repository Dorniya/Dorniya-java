1.Input and Display NxN Matrix Row-Wise and Column-Wise:
import java.util.Scanner;

public class MatrixDisplay {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        System.out.print("Enter size of matrix (N): ");
        int N = scanner.nextInt();
        int[][] matrix = new int[N][N];

        System.out.println("Enter matrix elements:");
        for (int i = 0; i < N; i++) {
            for (int j = 0; j < N; j++) {
                matrix[i][j] = scanner.nextInt();
            }
        }

        System.out.println("Matrix row-wise:");
        for (int i = 0; i < N; i++) {
            for (int j = 0; j < N; j++) {
                System.out.print(matrix[i][j] + " ");
            }
            System.out.println();
        }

        System.out.println("Matrix column-wise:");
        for (int j = 0; j < N; j++) {
            for (int i = 0; i < N; i++) {
                System.out.print(matrix[i][j] + " ");
            }
            System.out.println();
        }

        scanner.close();
    }
}
2.Interface and Overloaded Methods:
interface IterF1 {
    void add(int a, int b);
    void sub(int a, int b);
}

class Calculator implements IterF1 {
    @Override
    public void add(int a, int b) {
        System.out.println("Addition: " + (a + b));
    }

    @Override
    public void sub(int a, int b) {
        System.out.println("Subtraction: " + (a - b));
    }
}

public class Main {
    public static void main(String[] args) {
        Calculator calc = new Calculator();
        calc.add(10, 5);
        calc.sub(10, 5);
    }
}
3.Calculate Rate of Interest with Exception Handling:
public class ProvidentFund {
    public static void main(String[] args) {
        try {
            double principal = 10000; // Example principal amount
            double rate = -0.05; // Example rate (negative to simulate exception)
            double time = 5; // Example time period in years
            
            if (rate < 0) {
                throw new IllegalArgumentException("Interest rate cannot be negative.");
            }

            double interest = (principal * rate * time) / 100;
            System.out.println("Interest: " + interest);
        } catch (IllegalArgumentException e) {
            System.out.println("Exception: " + e.getMessage());
        } finally {
            System.out.println("Calculation finished.");
        }
    }
}
4.Thread Creation with Constructor:
class MyThread extends Thread {
    public MyThread() {
        super("ChildThread");
        System.out.println("Constructor: " + Thread.currentThread().getName());
        start(); // Start the thread immediately
    }

    @Override
    public void run() {
        System.out.println("Running thread: " + Thread.currentThread().getName());
    }
}

public class Main {
    public static void main(String[] args) {
        System.out.println("Main thread: " + Thread.currentThread().getName());
        MyThread myThread = new MyThread();
    }
}
5.Student Class with Custom Exceptions:
class AgeNotWithinRangeException extends Exception {
    public AgeNotWithinRangeException(String message) {
        super(message);
    }
}

class NameNotValidException extends Exception {
    public NameNotValidException(String message) {
        super(message);
    }
}

class Student {
    private int rollNo;
    private String name;
    private int age;
    private String course;

    public Student(int rollNo, String name, int age, String course) throws AgeNotWithinRangeException, NameNotValidException {
        if (age < 15 || age > 21) {
            throw new AgeNotWithinRangeException("Age must be between 15 and 21.");
        }
        if (!name.matches("[a-zA-Z]+")) {
            throw new NameNotValidException("Name must contain only letters.");
        }

        this.rollNo = rollNo;
        this.name = name;
        this.age = age;
        this.course = course;
    }

    @Override
    public String toString() {
        return "Student{" +
                "rollNo=" + rollNo +
                ", name='" + name + '\'' +
                ", age=" + age +
                ", course='" + course + '\'' +
                '}';
    }
}

public class Main {
    public static void main(String[] args) {
        try {
            Student student = new Student(1, "JohnDoe", 20, "Computer Science");
            System.out.println(student);
        } catch (AgeNotWithinRangeException | NameNotValidException e) {
            System.out.println("Exception: " + e.getMessage());
        }
    }
}
